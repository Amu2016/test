// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

#ifndef PROTOBUF_INCLUDED_login_2eproto
#define PROTOBUF_INCLUDED_login_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_login_2eproto 

namespace protobuf_login_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_login_2eproto
namespace Login {
class Login;
class LoginDefaultTypeInternal;
extern LoginDefaultTypeInternal _Login_default_instance_;
class LoginSuccess;
class LoginSuccessDefaultTypeInternal;
extern LoginSuccessDefaultTypeInternal _LoginSuccess_default_instance_;
}  // namespace Login
namespace google {
namespace protobuf {
template<> ::Login::Login* Arena::CreateMaybeMessage<::Login::Login>(Arena*);
template<> ::Login::LoginSuccess* Arena::CreateMaybeMessage<::Login::LoginSuccess>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Login {

// ===================================================================

class Login : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Login.Login) */ {
 public:
  Login();
  virtual ~Login();

  Login(const Login& from);

  inline Login& operator=(const Login& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Login(Login&& from) noexcept
    : Login() {
    *this = ::std::move(from);
  }

  inline Login& operator=(Login&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Login* internal_default_instance() {
    return reinterpret_cast<const Login*>(
               &_Login_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Login* other);
  friend void swap(Login& a, Login& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Login* New() const final {
    return CreateMaybeMessage<Login>(NULL);
  }

  Login* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Login>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Login& from);
  void MergeFrom(const Login& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Login* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required int32 msgId = 1;
  bool has_msgid() const;
  void clear_msgid();
  static const int kMsgIdFieldNumber = 1;
  ::google::protobuf::int32 msgid() const;
  void set_msgid(::google::protobuf::int32 value);

  // required int32 password = 3;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 3;
  ::google::protobuf::int32 password() const;
  void set_password(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Login.Login)
 private:
  void set_has_msgid();
  void clear_has_msgid();
  void set_has_name();
  void clear_has_name();
  void set_has_password();
  void clear_has_password();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 msgid_;
  ::google::protobuf::int32 password_;
  friend struct ::protobuf_login_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoginSuccess : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Login.LoginSuccess) */ {
 public:
  LoginSuccess();
  virtual ~LoginSuccess();

  LoginSuccess(const LoginSuccess& from);

  inline LoginSuccess& operator=(const LoginSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginSuccess(LoginSuccess&& from) noexcept
    : LoginSuccess() {
    *this = ::std::move(from);
  }

  inline LoginSuccess& operator=(LoginSuccess&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginSuccess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginSuccess* internal_default_instance() {
    return reinterpret_cast<const LoginSuccess*>(
               &_LoginSuccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LoginSuccess* other);
  friend void swap(LoginSuccess& a, LoginSuccess& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginSuccess* New() const final {
    return CreateMaybeMessage<LoginSuccess>(NULL);
  }

  LoginSuccess* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoginSuccess>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoginSuccess& from);
  void MergeFrom(const LoginSuccess& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginSuccess* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional bytes email = 4;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 4;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const void* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // required int32 msgId = 1;
  bool has_msgid() const;
  void clear_msgid();
  static const int kMsgIdFieldNumber = 1;
  ::google::protobuf::int32 msgid() const;
  void set_msgid(::google::protobuf::int32 value);

  // required int32 id = 3;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 3;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Login.LoginSuccess)
 private:
  void set_has_msgid();
  void clear_has_msgid();
  void set_has_name();
  void clear_has_name();
  void set_has_id();
  void clear_has_id();
  void set_has_email();
  void clear_has_email();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::int32 msgid_;
  ::google::protobuf::int32 id_;
  friend struct ::protobuf_login_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Login

// required int32 msgId = 1;
inline bool Login::has_msgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Login::set_has_msgid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Login::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Login::clear_msgid() {
  msgid_ = 0;
  clear_has_msgid();
}
inline ::google::protobuf::int32 Login::msgid() const {
  // @@protoc_insertion_point(field_get:Login.Login.msgId)
  return msgid_;
}
inline void Login::set_msgid(::google::protobuf::int32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:Login.Login.msgId)
}

// required bytes name = 2;
inline bool Login::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Login::name() const {
  // @@protoc_insertion_point(field_get:Login.Login.name)
  return name_.GetNoArena();
}
inline void Login::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Login.Login.name)
}
#if LANG_CXX11
inline void Login::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Login.Login.name)
}
#endif
inline void Login::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Login.Login.name)
}
inline void Login::set_name(const void* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Login.Login.name)
}
inline ::std::string* Login::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Login.Login.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Login::release_name() {
  // @@protoc_insertion_point(field_release:Login.Login.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Login::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Login.Login.name)
}

// required int32 password = 3;
inline bool Login::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Login::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Login::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Login::clear_password() {
  password_ = 0;
  clear_has_password();
}
inline ::google::protobuf::int32 Login::password() const {
  // @@protoc_insertion_point(field_get:Login.Login.password)
  return password_;
}
inline void Login::set_password(::google::protobuf::int32 value) {
  set_has_password();
  password_ = value;
  // @@protoc_insertion_point(field_set:Login.Login.password)
}

// -------------------------------------------------------------------

// LoginSuccess

// required int32 msgId = 1;
inline bool LoginSuccess::has_msgid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginSuccess::set_has_msgid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginSuccess::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginSuccess::clear_msgid() {
  msgid_ = 0;
  clear_has_msgid();
}
inline ::google::protobuf::int32 LoginSuccess::msgid() const {
  // @@protoc_insertion_point(field_get:Login.LoginSuccess.msgId)
  return msgid_;
}
inline void LoginSuccess::set_msgid(::google::protobuf::int32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:Login.LoginSuccess.msgId)
}

// required bytes name = 2;
inline bool LoginSuccess::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginSuccess::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginSuccess::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginSuccess::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& LoginSuccess::name() const {
  // @@protoc_insertion_point(field_get:Login.LoginSuccess.name)
  return name_.GetNoArena();
}
inline void LoginSuccess::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Login.LoginSuccess.name)
}
#if LANG_CXX11
inline void LoginSuccess::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Login.LoginSuccess.name)
}
#endif
inline void LoginSuccess::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Login.LoginSuccess.name)
}
inline void LoginSuccess::set_name(const void* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Login.LoginSuccess.name)
}
inline ::std::string* LoginSuccess::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Login.LoginSuccess.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginSuccess::release_name() {
  // @@protoc_insertion_point(field_release:Login.LoginSuccess.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginSuccess::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Login.LoginSuccess.name)
}

// required int32 id = 3;
inline bool LoginSuccess::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoginSuccess::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoginSuccess::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoginSuccess::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 LoginSuccess::id() const {
  // @@protoc_insertion_point(field_get:Login.LoginSuccess.id)
  return id_;
}
inline void LoginSuccess::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Login.LoginSuccess.id)
}

// optional bytes email = 4;
inline bool LoginSuccess::has_email() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginSuccess::set_has_email() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginSuccess::clear_has_email() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginSuccess::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
inline const ::std::string& LoginSuccess::email() const {
  // @@protoc_insertion_point(field_get:Login.LoginSuccess.email)
  return email_.GetNoArena();
}
inline void LoginSuccess::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Login.LoginSuccess.email)
}
#if LANG_CXX11
inline void LoginSuccess::set_email(::std::string&& value) {
  set_has_email();
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Login.LoginSuccess.email)
}
#endif
inline void LoginSuccess::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Login.LoginSuccess.email)
}
inline void LoginSuccess::set_email(const void* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Login.LoginSuccess.email)
}
inline ::std::string* LoginSuccess::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:Login.LoginSuccess.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginSuccess::release_email() {
  // @@protoc_insertion_point(field_release:Login.LoginSuccess.email)
  if (!has_email()) {
    return NULL;
  }
  clear_has_email();
  return email_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginSuccess::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:Login.LoginSuccess.email)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Login

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_login_2eproto
